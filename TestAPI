 function OnLoginBegin() {
    SetHtmlBlank("divMessage");
    if (Validate.StringValueValidate("txtUserName", "divMessage", "Please Enter UserName.")) { }
    else { return false; }
    if (Validate.StringValueValidate("txtPassword", "divMessage", "Please Enter Password.")) { }
    else { return false; }
    DisplayLoader(_LOADERDIVID);
    Disablebutton("btnSubmit");
}

function OnLoginSuccess(data) {
    HideLoader(_LOADERDIVID);
    switch (data.code) {
        case 0:
            SetHtml("divMessage", "Please Wait..");
            window.location = GetDomain(_DOMAINDIVID) + "Dashboard/Index";
            break;
        case -1:
            SetHtml("divMessage", data.message);
            Enablebutton("btnSubmit");
            break;
        case -2:
            SetHtml("divMessage", "SomeThing Goes Wrong");
            Enablebutton("btnSubmit");
            break;
        case -22:
            SetHtml("divMessage", "Please Wait..");
            window.location = GetDomain(_DOMAINDIVID) + "ChangePassword/Index";
            break;
    }
}
@using (Ajax.BeginForm(null, null, new AjaxOptions { OnBegin = "OnLoginBegin", OnSuccess = "OnLoginSuccess", Url = @GolfCentraWeb.UI.Common.Constants.Url.WebSiteUrl + "Login/DoLogin" }, new { @class = "login100-form" }))
                {
 
 
    @Html.TextBoxFor(x => x.MemberShipId, new { @id = "txtUserName", @autocomplete = "off", @class = "input100", @placeholder = "Membership Id" })

                            @*<input id="first-name" class="input100" type="text" name="username" placeholder="User name">*@
                            <span class="focus-input100"></span>
                        </div>
                        <div class="wrap-input100 rs2-wrap-input100 validate-input m-b-20" data-validate="Type password">
                            @Html.PasswordFor(x => x.Password, new { @id = "txtPassword", @autocomplete = "off", @class = "input100", @placeholder = "Password" })

                            @*<input class="input100" type="password" name="pass" placeholder="Password">*@
                            <span class="focus-input100"></span>
                        </div>

                        <div class="container-login100-form-btn">
                            <button class="login100-form-btn">
                                LOGIN
                            </button>
                            <div id="divMessage"></div>
                            <div id="divLoader" style="display:none">
                                <img src="@GolfCentraWeb.UI.Common.Constants.Url.WebSiteUrlWithoutSlash/Theme/images/loader.svg" />
                            </div>
                        </div>
 }
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web;

{
    /// <summary>
    /// API Calling Method
    /// </summary>
    public class APICallMethod
    {
        /// <summary>
        /// APIClient View Model Details
        /// </summary>
        /// <returns></returns>
        public ViewModel.ApiClientViewModel GetApiClientModel()
        {
            string id = "";
            if (HttpContext.Current.Session[Constants.SessionName] != null)
            {
                ViewModel.ResponseModel.ResponseViewModel<ViewModel.EmployeeViewModel> dbuser = ((ViewModel.ResponseModel.ResponseViewModel < ViewModel.EmployeeViewModel >)HttpContext.Current.Session[Constants.SessionName]);

                id = dbuser.Content.UniqueSessionId;
            }
            return new GolfCentraAdmin.ViewModel.ApiClientViewModel()
            {

                UserName = Common.Constants.ApiAccess.UserName,
                Password = Common.Constants.ApiAccess.Password,

                UniqueSessionId = id
            };
        }

        /// <summary>
        /// Http Client For API Access
        /// </summary>
        /// <returns> model Of Type HttpClient</returns>
        public HttpClient GetHttpClient()
        {
            HttpClient client = new HttpClient();
            Int32 time = Convert.ToInt32(Common.Constants.ApiAccess.HttpTime);
            client.Timeout = TimeSpan.FromMinutes(time);
            client.BaseAddress = new Uri(Common.Constants.Url.WebApiUrl);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/Json"));
            return client;
        }

        /// <summary>
        /// Call API Method Using Rest Client For Single Model
        /// </summary>
        /// <param name="functionName">Method Name of API</param>
        /// <param name="controllerName"> Controller Name Of API</param>
        /// <param name="model"> Model Of Data</param>
        /// <returns>Response From API</returns>
        public HttpResponseMessage GetHttpResponseMessage(string functionName, string controllerName, dynamic model)
        {
            try
            {
                model.ApiClientViewModel = GetApiClientModel();
                return GetHttpClient().PostAsJsonAsync("api/" + controllerName + "/" + functionName, (object)model).Result;
            }
            catch (Exception ex)
            {

                throw;
            }

        }

        /// <summary>
        /// Call API Method Using Rest Client For List Model
        /// </summary>
        /// <param name="functionName">Method Name of API</param>
        /// <param name="controllerName"> Controller Name Of API</param>
        /// <param name="model"> Model Of Data</param>
        /// <returns>Response From API</returns>
        public HttpResponseMessage GetHttpResponseMessageList(string functionName, string controllerName, dynamic model)
        {
            try
            {
                model[0].ApiClientViewModel = GetApiClientModel();
                return GetHttpClient().PostAsJsonAsync("api/" + controllerName + "/" + functionName, (object)model).Result;
            }
            catch (Exception ex)
            {

                throw;
            }

        }


        public HttpResponseMessage GetHttpResponseMessage(string functionName, string controllerName, dynamic model,string token)
        {
            try
            {
                model.ApiClientViewModel = new GolfCentraAdmin.ViewModel.ApiClientViewModel();
                model.ApiClientViewModel.UserName = Common.Constants.ApiAccess.UserName;
                model.ApiClientViewModel.Password = Common.Constants.ApiAccess.Password;
                model.ApiClientViewModel.UniqueSessionId = token;
                return GetHttpClient().PostAsJsonAsync("api/" + controllerName + "/" + functionName, (object)model).Result;
            }
            catch (Exception ex)
            {

                throw;
            }

        }
    }
}



 HttpResponseMessage response = new APIHelper.APICallMethod().GetHttpResponseMessage("GetAllMemberType", "AdminPanel", memberTypeViewModel);
            if (response.IsSuccessStatusCode)
            {
                var data = response.Content.ReadAsStringAsync().Result;
                ViewModel.ResponseModel.ResponseViewModel<List<ViewModel.MemberTypeViewModel>> dbBookingDetails = JsonConvert.DeserializeObject<ViewModel.ResponseModel.ResponseViewModel<List<ViewModel.MemberTypeViewModel>>>(data);
                if (dbBookingDetails.IdentityResult.Status == true)
                {
                    return dbBookingDetails.Content;
                }
                else
                {
                    return new List<MemberTypeViewModel>();
                }
            }
            else
            {
                return new List<MemberTypeViewModel>();
            }
            
            
              public static class Site
        {
            public static string SiteTitle = System.Configuration.ConfigurationManager.AppSettings["SiteTitle"];
        }
